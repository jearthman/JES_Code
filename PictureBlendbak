#Image Manipulator by James Earthman
#2/12/2014
#
#Abstract: This program lets the user choose and image and add filters then save the image. 
#Once the user chooses an image they are given four filter options: Negative, Black and White,
#lighten, and posterize. When the filter is added, the image is shown after going through
#the filter and the user can save the image as a .jpg or .png file. 

def main():
#Here the user picks a file and is shown what they have chosen, then the user is prompted 
#to select a filter they wish to use on the image.
  pic1 = makePicture(pickAFile())
  show(pic1)
  user_choice = requestString("Choose a filter:\n1. Negative\n2. Black and White\n3. Lighten\n4. Posterize")
#This block of if statements takes the user input an calls the correct function that goes 
#with their choice. 
  if user_choice == "1":  
    makeNegativePic(pic1)
  elif user_choice == "2":
    makeBlackandWhitePic(pic1)
  elif user_choice == "3":  
    makeLighterPic(pic1)
  elif user_choice == "4":
    makePosterizePic(pic1)
  
def makeNegativePic(pic1):
#This function takes the chosen image and applies a negative filter to it. Each pixel 
#is taken from the image, then the color values in the pixel are subtracted from 255
#respectively. This yields each color switching to its opposite on the color wheel 
#creating a negative filter. 
  picneg = duplicatePicture(pic1)
  width = getWidth(picneg)
  height = getHeight(picneg)
  for x in range(0, width):
    for y in range(0, height):
      pix = getPixel(picneg, x, y)
      blu = getBlue(pix)
      gree = getGreen(pix)
      re = getRed(pix)
      negColor = makeColor(255 - re, 255 - gree, 255 - blu)
      setColor(pix, negColor)
  repaint(picneg)
  file = pickAFile()
  writePictureTo(picneg, file)  

  
def makeBlackandWhitePic(pic1):
#This function takes the chosen image and applies a Black and White or greyscale filter
#to it. Each pixel is taken from the image, then each color value is heavily reduced and
#combined to create a constant value that instantiates the color values in makeColor. This
#yields each pixel being assigned to a shade on the grey spectrum making the image black
#and white.
  picbandw = duplicatePicture(pic1)
  for pix in getPixels(picbandw):
    newRed = getRed(pix) * 0.299
    newGreen = getGreen(pix) * 0.587
    newBlue = getBlue(pix) * 0.114
    greymesh = newRed+newGreen+newBlue
    setColor(pix, makeColor(greymesh, greymesh, greymesh))
  repaint(picbandw)
  file = pickAFile()
  writePictureTo(picbandw, file)  
  
  
def makeLighterPic(pic1):
#This function takes the chosen image and applies a lightening filter to it. Each pixel 
#is taken from the image, then the color values in the pixel are raised to give them
#a lighter tone. This yields the image being lighted overall. 
  piclighten = duplicatePicture(pic1)
  for pix in getPixels(piclighten):
    color = getColor(pix)
    color = makeLighter(color)
    setColor(pix, color)
  repaint(piclighten)
  file = pickAFile()
  writePictureTo(piclighten, file)  
  
def makePosterizePic(pic1):
#This function takes the chosen image and applies a posterization filter to it. Each
#pixel is taken from the image, then the color values of each pixel are minimized or
#maximazed depending on their value. This yields the image being posterized. 
  picPosterize = duplicatePicture(pic1)
  for pix in getPixels(picPosterize):
    if getRed(pix) < 128:
      newRed = 0
    else:
      newRed = 255
    if getGreen(pix) < 128:
      newGreen = 0
    else:
      newGreen = 255
    if getBlue(pix) < 128:
      newBlue = 0
    else:
      newBlue = 255
    posterize = makeColor(newRed, newGreen, newBlue)
    setColor(pix, posterize)
  repaint(picPosterize)
  file = pickAFile()
  writePictureTo(picPosterize, file)
      
main()       
    